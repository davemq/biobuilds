<?xml version="1.0"?>
<def format="2">
  <!-- Boost Library Configuration -->
  <!-- Documentation: https://www.boost.org/doc/libs/ -->
  <!-- ########## Boost defines / macros ########## -->
  <!-- https://www.boost.org/doc/libs/master/libs/config/doc/html/boost_config/boost_macro_reference.html -->
  <define name="BOOST_FORCEINLINE" value="inline"/>
  <define name="BOOST_NOINLINE" value=""/>
  <define name="BOOST_NORETURN" value="[[noreturn]]"/>
  <define name="BOOST_LIKELY(X)" value="(X)"/>
  <define name="BOOST_UNLIKELY(X)" value="(X)"/>
  <define name="BOOST_FIXTURE_TEST_SUITE(suite_name, fixture_name)" value=""/>
  <define name="BOOST_FIXTURE_TEST_SUITE_END()" value=""/>
  <define name="BOOST_TEST_GLOBAL_FIXTURE(name)" value=""/>
  <define name="BOOST_PYTHON_FUNCTION_OVERLOADS(foo_overloads, foo, x, y)" value=""/>
  <define name="BOOST_AUTO_TEST_SUITE(X)" value=""/>
  <define name="BOOST_AUTO_TEST_SUITE_END()" value=""/>
  <define name="BOOST_ASSERT(condition)" value="assert(condition)"/>
  <define name="BOOST_TEST(condition)" value="assert(condition)"/>
  <define name="BOOST_WARN(condition)" value="assert(condition)"/>
  <define name="BOOST_CHECK(condition)" value="assert(condition)"/>
  <define name="BOOST_REQUIRE(condition)" value="assert(condition)"/>
  <define name="BOOST_CHECK_EQUAL(a,b)" value="assert((a) == (b))"/>
  <define name="BOOST_WARN_EQUAL(a,b)" value="assert((a) == (b))"/>
  <define name="BOOST_REQUIRE_EQUAL(a,b)" value="assert((a) == (b))"/>
  <define name="BOOST_LOG_ATTRIBUTE_KEYWORD(keyword, name_, value_type_)" value="value_type_ keyword;"/>
  <!-- Tell cppcheck to interpret BOOST_AUTO_TEST_CASE as a function definition -->
  <define name="BOOST_AUTO_TEST_CASE(str)" value="void BOOST_AUTO_TEST_CASE_run(str)"/>
  <define name="BOOST_FIXTURE_TEST_CASE(str1, str2)" value="void BOOST_FIXTURE_TEST_CASE_run(str1,str2)"/>
  <define name="BOOST_PYTHON_MODULE(str)" value="void BOOST_PYTHON_MODULE_definition(str)"/>
</def>
